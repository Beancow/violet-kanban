rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Gets the user's role object from the organization's members map
    function getMembership(orgId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.members[request.auth.uid];
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && getMembership(orgId) != null;
    }

    function isRole(orgId, role) {
      return isOrgMember(orgId) && getMembership(orgId).role == role;
    }

    function isAtLeastRole(orgId, role) {
      return isOrgMember(orgId) &&
        (
          (role == 'member' && getMembership(orgId).role in ['owner', 'admin', 'member']) ||
          (role == 'admin' && getMembership(orgId).role in ['owner', 'admin']) ||
          (role == 'owner' && getMembership(orgId).role == 'owner')
        );
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for the 'organizations' collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow update: if isAtLeastRole(orgId, 'admin');
      allow create: if isAuthenticated();
    }

    // Rules for collections owned by an organization (e.g., boards, todos)
    // Assumes documents in these collections have an 'orgId' field.
    match /{collection}/{docId} {
       // Anyone in the org can read documents.
      allow read: if isOrgMember(resource.data.orgId);

      // Only admins or owners can create/update/delete documents.
      allow write: if isAtLeastRole(request.resource.data.orgId, 'admin');
    }
  }
}
