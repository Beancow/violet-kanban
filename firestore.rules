rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // For organization documents
    function isOrgMember() {
      return isAuthenticated() &&
        request.auth.uid in resource.data.members;
    }

    function isOwner() {
      return isAuthenticated() &&
        resource.data.members[request.auth.uid].role == 'owner';
    }

    function isAdmin() {
      return isAuthenticated() &&
        resource.data.members[request.auth.uid].role == 'admin';
    }

    // For nested collections - check parent org membership
    function isOrgMemberByOrgId(orgId) {
      return isAuthenticated() &&
        request.auth.uid in get(/databases/$(database)/documents/organizations/$(orgId)).data.members;
    }

    match /users/{userId} {
      allow read, create, update: if request.auth.uid == userId;
    }

    // Rules for the 'organizations' collection
    match /organizations/{orgId} {
      allow read: if isOrgMember();
      allow list: if isAuthenticated();
      allow update: if isOwner() || isAdmin();
      allow delete: if isOwner();
      allow create: if isAuthenticated();

      match /boards/{boardId} {
        allow read, list: if isOrgMemberByOrgId(orgId);
        allow create: if isOrgMemberByOrgId(orgId);
        allow update, delete: if isOrgMemberByOrgId(orgId);

        match /lists/{listId} {
          allow read, list: if isOrgMemberByOrgId(orgId);
          allow create: if isOrgMemberByOrgId(orgId);
          allow update, delete: if isOrgMemberByOrgId(orgId);

          match /todos/{todoId} {
            allow read, list: if isOrgMemberByOrgId(orgId);
            allow create: if isOrgMemberByOrgId(orgId);
            allow update, delete: if isOrgMemberByOrgId(orgId);
          }
        }
      }
    }
  }
}