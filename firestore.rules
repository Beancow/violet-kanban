rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Gets the user's role object from the organization's members map
    function getMembership(orgId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)).data.members[request.auth.uid];
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && getMembership(orgId) != null;
    }

    function isRole(orgId, role) {
      return isOrgMember(orgId) && getMembership(orgId).role == role;
    }

    function isAtLeastRole(orgId, role) {
      return isOrgMember(orgId) &&
        (
          (role == 'member' && getMembership(orgId).role in ['owner', 'admin', 'member']) ||
          (role == 'admin' && getMembership(orgId).role in ['owner', 'admin']) ||
          (role == 'owner' && getMembership(orgId).role == 'owner')
        );
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for the 'organizations' collection
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow update: if isAtLeastRole(orgId, 'admin');
      allow create: if isAuthenticated();

      match /boards/{boardId} {
        allow read: if isOrgMember(orgId);
        allow create: if isOrgMember(orgId) && request.resource.data.organizationId == orgId;
        allow update, delete: if isAtLeastRole(orgId, 'admin');

        match /lists/{listId} {
          allow read: if isOrgMember(orgId);
          allow create: if isOrgMember(orgId) && request.resource.data.boardId == boardId;
          allow update, delete: if isAtLeastRole(orgId, 'admin');
        }
      }
    }
  }
}